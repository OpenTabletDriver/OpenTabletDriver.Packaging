#!/usr/bin/env bash
SCRIPT_DIR=$(readlink -f $(dirname ${BASH_SOURCE[0]}))
[ ! -d "${SCRIPT_DIR}" ] && exit 100;

source "${SCRIPT_DIR}/../base"

# Build arguments
RUNTIME="osx-x64"
PROJECTS=("OpenTabletDriver.Daemon" "OpenTabletDriver.UX.MacOS")

# Directories
PKG_DIR="${SCRIPT_DIR}/OpenTabletDriver.app"
OUT_DIR="${PKG_DIR}/Contents/MacOS"
OUT_DIR_CONFIGURATIONS="${OUT_DIR}/Configurations"

# Package
PKG_ICONS_FILE="${PKG_DIR}/Contents/Resources/Icon.icns"
PKG_TARBALL_FILE="${SCRIPT_DIR}/OpenTabletDriver.${RUNTIME}.tar.gz"

clean() {
  clean_target "${PKG_TARBALL_FILE}" "Cleaning up existing builds..."
  clean_target "${OUT_DIR}" "Cleaning up build directory..."
}

build() {
  print "Building OpenTabletDriver..."
  for project in ${PROJECTS[@]}; do
    print "$project BUILDING"
    dotnet publish "${SRC_DIR}/${project}"\
      --runtime ${RUNTIME} \
      --configuration Release \
      --self-contained false \
      /p:PublishTrimmed=false \
      --framework ${FRAMEWORK} \
      --output ${OUT_DIR}
  done
}

package() {
  print "Copying all tablet configuration files to '${OUT_DIR_CONFIGURATIONS}'"
  cp -vr "${SRC_DIR_CONFIGURATIONS}" "${OUT_DIR_CONFIGURATIONS}"

  clean_debug "${OUT_DIR}"

  print "Copying MacOS assets..."
  cp -v "${SRC_DIR}/OpenTabletDriver.UX.MacOS/Icon.icons" "${PKG_ICONS_FILE}"

  create_tarball "${PKG_DIR}" "${PKG_TARBALL_FILE}"

  print "Packaging complete."
}

case $1 in
  "clean") clean ;;
  "prepare") prepare ;;
  "build") build ;;
  "package") package ;;
  *)
    clean
    prepare
    build
    package
  ;;
esac
