#!/usr/bin/env bash
SCRIPT_DIR=$(readlink -f $(dirname ${BASH_SOURCE[0]}))
[ ! -d "${SCRIPT_DIR}" ] && exit 100;

source "${SCRIPT_DIR}/../base"

# Build arguments
RUNTIME="linux-x64"
PROJECTS=("OpenTabletDriver.Daemon" "OpenTabletDriver.Console" "OpenTabletDriver.UX.Gtk")

# Directories
OUT_DIR="${SCRIPT_DIR}/OpenTabletDriver"
OUT_DIR_CONFIGURATIONS="${OUT_DIR}/Configurations"

# Package
PKG_TARBALL_FILE="${SCRIPT_DIR}/OpenTabletDriver.${RUNTIME}.tar.gz"

# Files
OUT_UDEV_FILE="${OUT_DIR}/99-opentabletdriver.rules"

clean() {
  clean_target "${PKG_TARBALL_FILE}" "Cleaning up existing builds..."
  clean_target "${OUT_DIR}" "Cleaning up build directory..."
  clean_target "${OUT_UDEV_FILE}" "Cleaning existing udev rules..."
}

build() {
  print "Building OpenTabletDriver..."
  for project in ${PROJECTS[@]}; do
    dotnet publish "${SRC_DIR}/${project}"\
      --runtime ${RUNTIME} \
    --configuration Release \
    --self-contained false \
    --framework ${FRAMEWORK} \
    --output ${OUT_DIR}
  done
}

package() {
  generate_rules "${SRC_DIR_CONFIGURATIONS}" "${OUT_UDEV_FILE}"

  print "Copying all tablet configuration files to '${OUT_DIR_CONFIGURATIONS}'"
  cp -vr "${SRC_DIR_CONFIGURATIONS}" "${OUT_DIR_CONFIGURATIONS}"

  clean_debug "${OUT_DIR}"

  create_tarball "${OUT_DIR}" "${PKG_TARBALL_FILE}"

  print "Packaging complete."
}

case $1 in
  "clean") clean ;;
  "prepare") prepare ;;
  "build") build ;;
  "package") package ;;
  *)
    clean
    prepare
    build
  package
  ;;
esac
