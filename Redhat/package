#!/usr/bin/env bash
SCRIPT_DIR=$(readlink -f $(dirname ${BASH_SOURCE[0]}))
[ ! -d "${SCRIPT_DIR}" ] && exit 100;

source "${SCRIPT_DIR}/../base"

# Build arguments
RUNTIME="linux-x64"
PROJECTS=("OpenTabletDriver.Daemon" "OpenTabletDriver.Console" "OpenTabletDriver.UX.Gtk")

# Directories
PKG_DIR="${SCRIPT_DIR}/OpenTabletDriver"
OUT_DIR="${PKG_DIR}/usr/share/OpenTabletDriver"
OUT_DIR_CONFIGURATIONS="${OUT_DIR}/Configurations"

# Package
PKG_RPM_FILE="${SCRIPT_DIR}/OpenTabletDriver.rpm"
SPEC_FILE="${SCRIPT_DIR}/opentabletdriver.spec"

# RPM Directories
RPM_TOPDIRS=(BUILD BUILDROOT RPMS SOURCES SPECS SRPMS)

# Output

clean() {
  clean_target "${PKG_RPM_FILE}" "Cleaning up existing builds..."
  clean_target "${OUT_DIR}" "Cleaning up build directory..."
  clean_target "${OUT_UDEV_FILE}" "Cleaning existing udev rules..."

  for dir in ${RPM_TOPDIRS[@]}; do
    clean_target "${SCRIPT_DIR}/${dir}" "Cleaning up ${dir} folder..."
  done

  for file in $(ls ${PKG_DIR} | grep -v LICENSE); do
    clean_target "${PKG_DIR}/${file}" "Cleaning up ${file} in PKG_DIR..."
  done

  print "Cleaning 'opentabletdriver.spec'..."
  regex_edit "^Version: .\+$" "Version: 0.0.0" "${SPEC_FILE}"
}

build() {
  print "Building OpenTabletDriver..."
  mkdir -p ${OUT_DIR}
  for project in ${PROJECTS[@]}; do
    dotnet publish "${SRC_DIR}/${project}"\
      --runtime ${RUNTIME} \
      --configuration Release \
      --self-contained false \
      --framework ${FRAMEWORK} \
      --output ${OUT_DIR}
  done
}

package() {
  mkdir -p "${PKG_DIR}"
  install_common_linux_files "${PKG_DIR}"

  mkdir -p ${SCRIPT_DIR}/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}

  print "Copying all tablet configuration files to '${OUT_DIR_CONFIGURATIONS}'"
  cp -vr "${SRC_DIR_CONFIGURATIONS}" "${OUT_DIR_CONFIGURATIONS}"

  clean_debug "${OUT_DIR}"

  update_version

  create_rpmpkg "${PKG_DIR}" "${PKG_RPM_FILE}"

  print "Packaging complete."
}

update_version() {
  PKG_VERSION=$(get_group "$(cat ${SRC_DIR}/OpenTabletDriver/OpenTabletDriver.csproj)" '<VersionPrefix>(.+?)<\/VersionPrefix>' 1)

  print "Updating version in opentabletdriver.spec"
  regex_edit "Version: .\+$" "Version: ${PKG_VERSION}" "${SPEC_FILE}"
}

create_rpmpkg() {
  [ "$#" -ne 2 ] && exit 104
  
  print "Packaging 'OpenTabletDriver.rpm'..."
  rpmbuild -D "_topdir ${SCRIPT_DIR}" -D "pkg_dir ${1}" -bb ${SPEC_FILE}
  mv ${SCRIPT_DIR}/RPMS/x86_64/opentabletdriver*.rpm ${2}
}

case $1 in
    "clean") clean ;;
    "prepare") prepare ;;
    "build") build ;;
    "package") package ;;
    *)
        clean
        prepare
        build
        package
    ;;
esac