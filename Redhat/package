#!/usr/bin/env bash
SCRIPT_DIR=$(realpath $(dirname ${BASH_SOURCE[0]}))
[ ! -d "${SCRIPT_DIR}" ] && exit 100;

source "${SCRIPT_DIR}/../base"

# Build arguments
FRAMEWORK="net6.0"
RUNTIME="linux-x64"
PROJECTS=("OpenTabletDriver.Daemon" "OpenTabletDriver.Console" "OpenTabletDriver.UX.Gtk")

# Directories
PKG_DIR="${SCRIPT_DIR}/OpenTabletDriver"
OUT_DIR="${PKG_DIR}/usr/share/OpenTabletDriver"
OUT_DIR_CONFIGURATIONS="${OUT_DIR}/Configurations"
OUT_DIR_PIXMAPS="${PKG_DIR}/usr/share/pixmaps"
RPM_TOPDIRS=(BUILD BUILDROOT RPMS SOURCES SPECS SRPMS)

# Package
PKG_RPM_FILE="${SCRIPT_DIR}/OpenTabletDriver.rpm"
SPEC_FILE="${SCRIPT_DIR}/opentabletdriver.spec"

# Output

clean() {
  clean_target "${PKG_RPM_FILE}" "Cleaning up existing builds..."
  clean_target "${PKG_DIR}" "Cleaning up PKG_DIR..."
  
  for dir in ${RPM_TOPDIRS[@]}; do
    clean_target "${SCRIPT_DIR}/${dir}" "Cleaning up ${dir} folder..."
  done

  print "Cleaning 'opentabletdriver.spec'..."
  regex_edit "^Version: .\+$" "Version: 0.0.0" "${SPEC_FILE}"
}

build() {
  print "Building OpenTabletDriver..."
  for project in ${PROJECTS[@]}; do
    dotnet publish "${SRC_DIR}/${project}"\
      --runtime ${RUNTIME} \
      --configuration Release \
      --self-contained false \
      --framework ${FRAMEWORK} \
      --output ${OUT_DIR} \
      /p:VersionSuffix="${VERSION_SUFFIX}"
  done
}

package() {
  install_common_linux_files "${PKG_DIR}"
  
  for dir in ${RPM_TOPDIRS[@]}; do
    mkdir -p "${SCRIPT_DIR}/${dir}"
  done

  clean_debug "${OUT_DIR}"

  update_version

  create_rpmpkg "${PKG_DIR}" "${PKG_RPM_FILE}"

  print "Packaging complete."
}

update_version() {
  print "Updating version in opentabletdriver.spec"
  regex_edit "Version: .\+$" "Version: ${PKG_VERSION}" "${SPEC_FILE}"
}

create_rpmpkg() {
  [ "$#" -ne 2 ] && exit 104
  
  print "Packaging 'OpenTabletDriver.rpm'..."
  rpmbuild -D "_topdir ${SCRIPT_DIR}" -D "pkg_dir ${1}" -bb ${SPEC_FILE}
  mv ${SCRIPT_DIR}/RPMS/x86_64/opentabletdriver*.rpm ${2}
}

case $1 in
    "clean") clean ;;
    "prepare") prepare ;;
    "build") build ;;
    "package") package ;;
    *)
        clean
        prepare
        build
        package
    ;;
esac